[{"categories":null,"content":" GitHub Actions ","date":"2022-09-27","objectID":"/github-actions-hugo/:0:0","tags":["blog","HUGO","github actions","CICD"],"title":"如何构建博客","uri":"/github-actions-hugo/"},{"categories":null,"content":"前言 如何用hugo搭建自己的博客，这里我就不展开说明，大家可以去B站或者随意百度“如何使用hugo构建博客”，有大量的博文告诉你如何使用hugo。 假如你按照网络上的教程，成功的发布了自己的博客(这里默认你用的GitHub Pages)。那么你可能在想，如果我每写一篇博客是不是都要敲一下命令？ hugo --theme=\"LoveIt\" --baseUrl=\"https://****.github.io\" --buildDrafts cd ./public git add . git push hugo有没有提供什么接口可以快捷的发送博文吗？很遗憾，hugo并不支持这一功能。不过，还好有GitHub Action。借助github这一功能，我们能够解决这个问题，自动发布部署我们的博客。(实际上我觉得并没有太多工作，但是还是想折腾一下😆) ","date":"2022-09-27","objectID":"/github-actions-hugo/:1:0","tags":["blog","HUGO","github actions","CICD"],"title":"如何构建博客","uri":"/github-actions-hugo/"},{"categories":null,"content":"啥是GitHub Actions？ GitHub Actions 是GitHub在2018年出的一个CI/CD 服务。这里就不展开CI/CD是什么了，后期会出一系列的CI/CD的博客。简单的理解就是提交代码到GitHub，GitHub会自动将你的代码部署到服务器中，在本文中就是将hugo源码自动编译然后部署到你的GitHub Pages中。 ","date":"2022-09-27","objectID":"/github-actions-hugo/:2:0","tags":["blog","HUGO","github actions","CICD"],"title":"如何构建博客","uri":"/github-actions-hugo/"},{"categories":null,"content":"使用Github Actions部署博客 ","date":"2022-09-27","objectID":"/github-actions-hugo/:3:0","tags":["blog","HUGO","github actions","CICD"],"title":"如何构建博客","uri":"/github-actions-hugo/"},{"categories":null,"content":"Step 1: 创建一个名字为.github.io 创建一个名字为.github.io的仓库，这个仓库用来存放编译后的Public文件，使用使用hugo编译时指定的url，就可以访问你的博客了。 ","date":"2022-09-27","objectID":"/github-actions-hugo/:3:1","tags":["blog","HUGO","github actions","CICD"],"title":"如何构建博客","uri":"/github-actions-hugo/"},{"categories":null,"content":"Step 2: 创建另外一个仓库用来存放你的Hugo源码 创建一个仓库用来存放你博客的源码，命名没有什么特别的规则，看自己喜好。需要注意的一点是，如果使用了hugo主题那么最好用git submode的方式引入到你的源码中，并且再git push之前确保更新主题到最新版本。 git submodule update --init --recursive git push origin master 当然这一步我们也可以借助actions来帮助我们来进行这一步操作。 ","date":"2022-09-27","objectID":"/github-actions-hugo/:3:2","tags":["blog","HUGO","github actions","CICD"],"title":"如何构建博客","uri":"/github-actions-hugo/"},{"categories":null,"content":"Step 3：创建GitHub Token 接下来我们需要在Github Token页面生成一个Token用于Actions中连接到你的仓库，拉取代码，更新主题，并将生成的pubic文件推送到你的.github.io仓库中。 GitHub Token ","date":"2022-09-27","objectID":"/github-actions-hugo/:3:3","tags":["blog","HUGO","github actions","CICD"],"title":"如何构建博客","uri":"/github-actions-hugo/"},{"categories":null,"content":"Step 4: 添加token 将上一步的token放入hugo源码仓库的setting中的secrets中， setting add token ","date":"2022-09-27","objectID":"/github-actions-hugo/:3:4","tags":["blog","HUGO","github actions","CICD"],"title":"如何构建博客","uri":"/github-actions-hugo/"},{"categories":null,"content":"Step 5: 编写GitHub Actions name: ci-cd on: push jobs: deploy: runs-on: ubuntu-latest steps: - name: Git checkout uses: actions/checkout@v2.3.4 with: submodules: recursive token: ${{ secrets.TOKEN}} - name: Update theme # 这里自动更新主题 run: git submodule update --init --recursive - name: Setup hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \"latest\" - name: Build # minify不需要可以移除 # docs: https://gohugo.io/hugo-pipes/minification/ run: hugo --minify --buildDrafts - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.TOKEN }} external_repository: \u003cusername\u003e.github.io publish_dir: ./public user_name: username user_email: email@***.com publish_branch: main # 自定义 # cname参数填写你的自定义域名，可有可无 # cname: example.com 在源码目录中创建.github/workflow文件，然后创建一个yml文件，将上述的代码贴入yml文件中，修改信息后就欧克了。 当你像源码仓库推送文件时，自动触发这个名字为ci-cd的actions。我们一步步看这个actions都做了什么动作 deploy.runs-on 声名了整个流程基于ubuntu-latest运行 Git checkout 这一步会获取到源码。with.submodules会将主题的代码拉下来，with.token会获取到我们之前设置的token用于连接仓库。 Update Theme 这一步会更新主题的代码。 Setup hugo 会使用actions-hugo来获取hugo需要的运行环境。 Build 构建博客。 Deploy 使用actions-gh-pages来将生成的pubilc文件，推送到你的github page仓库。 ","date":"2022-09-27","objectID":"/github-actions-hugo/:3:5","tags":["blog","HUGO","github actions","CICD"],"title":"如何构建博客","uri":"/github-actions-hugo/"},{"categories":null,"content":"Step 6：将源码push到github中 我们将源码提交到GitHub中，然后actions就自动帮我们部署页面了！ actions界面详情 在这里我们可以点击到对应的deploy中查看部署详情。 等待actions部署成功后，等待几分钟就去个人静态页面中查看自己的博客了！ ","date":"2022-09-27","objectID":"/github-actions-hugo/:3:6","tags":["blog","HUGO","github actions","CICD"],"title":"如何构建博客","uri":"/github-actions-hugo/"},{"categories":null,"content":"end 整个部署过程还是比较简单明了的，不过遗憾的是我也刚接触hugo和actions两个不久，不过暂时我也不准备深入了解这两个工具。目前会的这些东西也能够支撑我写博客了，边用边学吧！88😏 ","date":"2022-09-27","objectID":"/github-actions-hugo/:4:0","tags":["blog","HUGO","github actions","CICD"],"title":"如何构建博客","uri":"/github-actions-hugo/"},{"categories":null,"content":"为什么要弄这个博客 从三年前开始自转码，就一直筹划着做一个自己的博客。转码的第二个月学习django的时候就想要用django写一个自己的博客系统，但是奈何当时学艺不精的我，抄都抄不明白。 而后又因为就业压力不得不去学习一些找工作的技能，可惜面向就业的技能怎么也学不完。学习的过程中积攒了一些不成体系的笔记，最开始用GitHub来托管自己的一些学习记录和笔记，后来用了Obsidian后就一直用U盘当作托管平台😆。 最近重新学习数据结构和计组，想要记录一下学习过程，将学习的结果落在纸上，顺道将以前的知识梳理一遍，于是就又想着把blog给捡起来。本来是想要自己重头开始写的，但是对blog这个东西完全没有头绪，也不知道自己写blog会需要一些什么东西，就想着先不要从头开始写，先用一些成熟的框架来用一段时间，在使用的过程中记录自己的需求，然后有一定积累的时候再从头开始客制化自己的博客。 ","date":"2022-09-27","objectID":"/birth-of-my-blog/:1:0","tags":["blog"],"title":"我的第一篇博客","uri":"/birth-of-my-blog/"},{"categories":null,"content":"计划 从今天开始给自己制定一个计划，希望自己能够严格执行。 每周保证三篇学习笔记 每周保证一篇杂记 每周保证更新自己目标完成的进度 ","date":"2022-09-27","objectID":"/birth-of-my-blog/:2:0","tags":["blog"],"title":"我的第一篇博客","uri":"/birth-of-my-blog/"}]